## The CMakeBuildConfigTemplate.txt defines the default build settings
## that are used when you build a clean checkout.
##
## CMakeBuildConfigTemplate.txt is only a template file! Changes to that file
## do not have any effect on the actual CMake execution.
##
## For the actual configuration, the file CMakeBuildConfigTemplate.txt gets 
## copied to CMakeBuildConfig.txt, in which you can customize your own settings.
##
## The CMakeBuildConfig.txt is not part of the repository, and do not add it there!
## The idea is that everyone can customize the set of modules to build using that 
## file, without having to fear about an accidental commit of these changes.

############################################################################################################
###### BUILD CONFIGURATION DEFINES #########################################################################

## Various flags/defines that configure your build

set (HYDRAX 1)                      # Configure the use of Hydrax, 
if (MSVC AND HYDRAX)                # http://www.ogre3d.org/tikiwiki/Hydrax
    configure_hydrax ()
endif()

set (SKYX 1)                        # Configure the use of SkyX,
if (MSVC AND SKYX)                  # http://www.ogre3d.org/tikiwiki/SkyX
    configure_skyx()
endif()

set (OPENASSETIMPORT 0)             # Enables Open Asset Import Library, which can be
if (MSVC)                           # used to import various mesh formats.
    #SET(OPENASSETIMPORT 1)         # Disabled for now in tundra2?
endif()

set (OGREASSETEDITOR 1)             # Enables Ogre asset editor module.

# If WINDOWS_APP == 0, the console (output log) window is created and shown when the application starts on Windows.
# If WINDOWS_APP == 1, this window is not shown. This flag only affects when building on Windows.
set (WINDOWS_APP 0)

# Enable the following flag to add compile with support for a built-in execution time profiler.
# add_definitions(-DPROFILING)

# Enable js profiling?
# add_definitions -(DENABLE_JS_PROFILING)

# If the following flag is defined, memory leak checking is enabled in all modules when building on MSVC.
if (MSVC)
    add_definitions(-DMEMORY_LEAK_CHECK)
endif()

# duplicates are in CMakeLists.txt, can be removed??
#use_package(OPENAL)
#use_package(OGG)
#use_package(VORBIS)

############################################################################################################
###### REQUIRED FRAMEWORK ##################################################################################

## The following are the core modules/libs that are required 
## for the project to build. None of these can be omitted.

AddProject(Core Framework)
AddProject(Core Scene)
AddProject(Core Tundra)

AddProject(Core Asset)
AddProject(Core Audio)
AddProject(Core Console)
AddProject(Core Input)
AddProject(Core Ui)

AddProject(Core OgreRenderingModule)

############################################################################################################
###### ENTITY COMPONENTS ###################################################################################

## The AddEntityComponent macros must appear before any of the add_subdirectory() directives for modules that use the ECs, or otherwise
## they will not be able to conditionally compile the EC.

## The following EC's are declared by TundraProtocolModule and are optional.
## You may comment these lines out to disable any ECs you do not want to include.
AddEntityComponent(EC_Highlight)
AddEntityComponent(EC_Sound)
AddEntityComponent(EC_HoveringText)
AddEntityComponent(EC_ParticleSystem)
AddEntityComponent(EC_Billboard)
AddEntityComponent(EC_TransformGizmo)
AddEntityComponent(EC_Script)                       # Used by both PythonScriptModule and JavascriptModule. It is optional.

#AddEntityComponent(EC_Light)
#AddEntityComponent(EC_Touchable)
#AddEntityComponent(EC_PlanarMirror)
#AddEntityComponent(EC_ProximityTrigger)

############################################################################################################
###### REQUIRED MODULES ####################################################################################

## Here we should have module that are required to build the SDK at minimum (Is this the case??)

AddProject(Core TundraProtocolModule)
AddProject(Core AssetModule)
AddProject(Core ECEditorModule)
AddProject(Core PhysicsModule)                      # Depends on OgreRenderingModule.

############################################################################################################
###### OPTIONAL MODULES ####################################################################################

AddProject(Application AvatarModule)                # Depends on OgreRenderingModule.
AddProject(Application EnvironmentModule)           # Depends on OgreRenderingModule.
AddProject(Application DebugStatsModule)            # Enables a developer window for debugging. Depends on OgreRenderingModule and EnvironmentModule.
AddProject(Application SkyXHydrax)                  # Provides photorealistic sky and water components by utilizing SkyX and Hydrax Ogre add-ons.
AddProject(Application JavascriptModule)            # Allows QtScript-created scene script instances.
#AddProject(Application PythonScriptModule)         # Allows Python-created modules and scene script instances. Depends on OgreRenderingModule and AvatarModule
#AddProject(Application UpdateModule                # Windows msi installer only. Adds 'Check For Updates' functionality.

if (OGREASSETEDITOR)
    AddProject(Application OgreAssetEditorModule)   # Enables Ogre-specific asset editors. Depends on OgreRenderingModule.
endif()

if (OPENASSETIMPORT)
    AddProject(Application OpenAssetImport)         # Allows import of various mesh file formats
endif()

if (MSVC)
    #AddProject(Application MumbleVoipModule)       # VOIP communication using the Mumble library. Depends on OgreRenderingModule.
endif()
