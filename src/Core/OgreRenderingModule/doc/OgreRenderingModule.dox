/**

\page OgreRenderingModule Using the Ogre renderer module

<b>This documentation page is deprecated and is pending a rewrite.</b>
	Below is a description on how to use Foundation::RenderServiceInterface, which the Ogre renderer module implements, as well as the
	rest of the public interface of the renderer.

	Because abstracting the whole of the Ogre functionality into the RenderService 
	would be a large and tedious undertaking, the Ogre rendering module gives ways to access the
	Ogre objects (such as scene manager, rendering window etc.) directly.
	
	\section renderservice_ORM Acquiring and using the RenderService
<b>This documentation page is deprecated and is pending a rewrite.</b>

	The RenderService should be available whenever the Ogre renderer module is loaded and initialized. The abstract service interface 
	itself provides some non-Ogre specific functionality, such as rendering the scene, resizing the rendering window, 
	querying the window dimensions, and subscribing/unsubscribing to the renderer log.

	The framework itself already uses the service to render the scene after the update loop on each frame, which also serves as an usage example:

\code	
if (service_manager_->IsRegistered(Service::ST_Renderer))
{
	Foundation::RenderServiceInterface *renderer = service_manager_->GetService<RenderServiceInterface>(Service::ST_Renderer);
	renderer->Render();
}
\endcode
	

	\section ogreresources_ORM Using renderer resources created from in-world asset data
<b>This documentation page is deprecated and is pending a rewrite.</b>

	Through the RenderService one can also request renderer-specific resources created from in-world assets (textures, meshes etc.) 
	The Ogre resources are subclassed from the abstract interface Foundation::ResourceInterface and contain a pointer to the actual Ogre resource object.

	Currently there is support for requesting and creating mesh (OgreRenderer::OgreMeshResource), texture (OgreRenderer::OgreTextureResource), 
        material (OgreRenderer::OgreMaterialResource) and particle script (OgreRenderer::OgreParticleResource) resources.

	See the functions Foundation::RenderServiceInterface::GetResource(), Foundation::RenderServiceInterface::RequestResource() and Foundation::RenderServiceInterface::RemoveResource().
	They are similar to the AssetService in that GetResource() will not automatically request download of the asset; RequestResource() is needed for that. 
	Also similarly to the AssetService, RequestResource() returns a request tag by which you can identify your request later.
	
	Note that to ensure that the renderer actually creates the resources correctly, one should not ask the assets directly from the 
	AssetService (unless interested of the raw asset data), but rather the resources from the RenderService.
	
	The RESOURCE_READY event will be sent when a renderer resource request has been completed. See also \ref Resources.
	
	An example of requesting a mesh resource: (note that at least currently resource id's correspond directly to asset id's)

\code
	Core::request_tag_t tag = renderer->RequestResource(mesh_resource_id, OgreRenderer::OgreMeshResource::GetTypeStatic());
\endcode

		
	\section ogrespecific_ORM Using Ogre-specific functionality
<b>This documentation page is deprecated and is pending a rewrite.</b>

	To get deeper into Ogre-related specifics, one must use directly the OgreRenderer::Renderer interface, instead of Foundation::RenderServiceInterface.
	One can still go through the ServiceManager to get the renderer, but the class name is different.
	
	For example:

\code
OgreRenderer::Renderer *renderer = owner_->GetFramework()->GetServiceManager()->GetService<OgreRenderer::Renderer>(Foundation::Service::ST_Renderer);
\endcode

	After this, one can for example get the Ogre scene manager from the renderer.

	


	\section ogreec_ORM Ogre-related entity components
<b>This documentation page is deprecated and is pending a rewrite.</b>

	There are also several Ogre-related entity components in the OgreRenderingModule; these can be used to populate the scene with Ogre objects.
	These include for example OgreRenderer::EC_OgrePlaceable, which encapsulates an Ogre scene node, and OgreRenderer::EC_OgreMesh, which encapsulates 
	a mesh entity.

	Each component has its own interface, which might be subject to change.


	\section rendererevents_ORM Renderer events
<b>This documentation page is deprecated and is pending a rewrite.</b>
	
	The rendering module sends events of the event category "Renderer", defined in RendererEvents.h. Other modules should not send events of this category.

	\subsection postrender_ORM POST_RENDER
<b>This documentation page is deprecated and is pending a rewrite.</b>

	The POST_RENDER event is sent when the rendering module has completed drawing the 3D scene, but before it swaps buffers. This event contains no event data structure. 
	Responding to this event allows custom rendering to be added on top of the 3D scene. Normally modules handling this event should return false, so that the event will 
	propagate to all modules interested in it, but true could be returned in the case of a module wanting to do exclusive custom rendering. 

	\subsection windowclosed_ORM WINDOW_CLOSED

<b>This documentation page is deprecated and is pending a rewrite.</b>
	WINDOW_CLOSED event is sent when the rendering window has been closed. This event contains no event data structure. At the point this message is sent, the viewer will 
        be exiting its main loop. Modules handling this event should return false so that it propagates to all interested receivers.

	\subsection windowresized_ORM WINDOW_RESIZED
<b>This documentation page is deprecated and is pending a rewrite.</b>

	WINDOW_RESIZED event is sent when the rendering window has been resized. This event uses the OgreRenderer::Events::WindowResized data structure, which tells the new
	dimensions of the window. Modules handling this event should return false so that it propagates to all interested receivers.
*/