/**

\page SceneModelPage Scenes, entities and components.

	The scene, entity and component model describes the virtual world of the viewer.

\section scene_sec Scene

	At the highest level, the world (and some other parts aswell) is composed of one or
	more scenes. Scenes are generic containers for entities, and entities may be shared
	between scenes.
	
	Iterators are provided for iterating through all entities in a scene. If you wish to
	access components of a specific type inside the entities, iterating with
	Foundation::ComponentManager is the preferred way.

\section entity_scene_sec Entity

	An entity is a presence in the scene. Entities contain components, which define
	data and behaviour for the entity. Components can be shared between entities and
	it allows for uniform behaviour between entities.

	For example you can have a row of entities all sharing the same 'light' component.
	In this way all the entities have the same lighting characteristics and can be used
	to represent a row of identical lights which can be turned on or off by simply
	modifying the one shared component.

	Entities can contain any number of components of any type. They can even contain
	several different instances of the same type of component. It is up to the component
	to make sure this causes no problems.

\section component_scene_sec Component

	Components are lightweight containers of entity specific data and behaviour. It
	is recommended though that components minimize the amount of behaviour they
	define and instead let parent modules handle the behaviour, based on the data
	the component contains.

\section usage_scene_sec Usage
	
	Components are accessed through entities and entities are accessed through scenes.
	Scenes can be accessed, created and removed through the Framework.
	
	Please note that components, entities and scenes are managed as shared pointers.
	If you wish to store a pointer for longer period of time, over the scope of a 
	single function, weak pointer is preferred to avoid dangling references and to
	make sure when component, entity or scene is removed, it gets destroyed properly
	right away.

*/
